<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dogancaglar.paymentservice.adapter.outbound.persistance.mybatis.OutboxEventMapper">
    <resultMap id="OutboxEventResultMap"
               type="com.dogancaglar.paymentservice.adapter.outbound.persistance.entity.OutboxEventEntity">
        <id property="oeid" column="oeid"/>
        <result property="eventType" column="event_type"/>
        <result property="aggregateId" column="aggregate_id"/>
        <result property="payload" column="payload"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <select id="findByStatus" resultMap="OutboxEventResultMap">
        SELECT oeid, event_type, aggregate_id, payload, status, created_at FROM outbox_event WHERE status = #{status}
    </select>

    <select id="countByStatus" resultType="long">
        SELECT COUNT(*) FROM outbox_event WHERE status = #{status}
    </select>


    <select id="findBatchForDispatch" resultMap="OutboxEventResultMap">
        WITH claimed AS (
        UPDATE outbox_event
        SET status = 'PROCESSING',
        claimed_at = clock_timestamp(),
        claimed_by = #{workerId}
        WHERE (oeid, created_at) IN (
        SELECT oeid, created_at
        FROM outbox_event
        WHERE status = 'NEW'
        ORDER BY created_at
        LIMIT #{batchSize}
        FOR UPDATE SKIP LOCKED
        )
        RETURNING oeid, event_type, aggregate_id, payload, status, created_at
        )
        SELECT oeid, event_type, aggregate_id, payload, status, created_at
        FROM claimed
    </select>

    <insert id="insertOutboxEvent"
            parameterType="com.dogancaglar.paymentservice.adapter.outbound.persistance.entity.OutboxEventEntity">
        INSERT INTO outbox_event (oeid, event_type, aggregate_id, payload, status, created_at)
        VALUES
        (#{oeid}, #{eventType}, #{aggregateId}, #{payload}, #{status}, #{createdAt})
    </insert>

    <insert id="insertAllOutboxEvents" parameterType="java.util.List">
        INSERT INTO outbox_event (oeid, event_type, aggregate_id, payload, status, created_at)
        VALUES
        <foreach collection="list" item="event" separator=",">
            (#{event.oeid},
            #{event.eventType},
            #{event.aggregateId},
            #{event.payload},
            #{event.status},
            #{event.createdAt})
        </foreach>
    </insert>

    <update id="updateOutboxEventStatus">
        UPDATE outbox_event
        SET status = #{status}
        WHERE oeid = #{oeid}
    </update>



    <update id="reclaimStuckClaims" parameterType="int">
        UPDATE outbox_event
        SET status = 'NEW',
        claimed_at = NULL,
        claimed_by = NULL
        WHERE status = 'PROCESSING'
        AND claimed_at &lt; (clock_timestamp() - (#{olderThanSeconds} || ' seconds')::interval)
    </update>




    <update id="batchUpdate" parameterType="java.util.List">
        WITH rows(oeid, created_at, status) AS (
        VALUES
        <foreach collection="list" item="e" separator=",">
            (#{e.oeid}, #{e.createdAt}, #{e.status})
        </foreach>
        )
        UPDATE outbox_event o
        SET status = rows.status,
        claimed_at = NULL,
        claimed_by = NULL
        FROM rows
        WHERE o.oeid = rows.oeid
        AND o.created_at = rows.created_at
    </update>
</mapper>
