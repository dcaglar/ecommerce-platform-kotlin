<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dogancaglar.infrastructure.persistence.repository.OutboxEventMapper">
    <resultMap id="OutboxEventResultMap"
               type="com.dogancaglar.infrastructure.persistence.entity.OutboxEventEntity">
        <id property="eventId" column="id" javaType="java.util.UUID"
            typeHandler="com.dogancaglar.infrastructure.persistence.typehandler.UUIDTypeHandler"/>
        <result property="eventType" column="event_type"/>
        <result property="aggregateId" column="aggregate_id"/>
        <result property="payload" column="payload"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <select id="findByStatus" resultMap="OutboxEventResultMap">
        SELECT id, event_type, aggregate_id, payload, status, created_at FROM outbox_event WHERE status = #{status}
    </select>

    <select id="countByStatus" resultType="long">
        SELECT COUNT(*) FROM outbox_event WHERE status = #{status}
    </select>

    <select id="findBatchForDispatch" resultMap="OutboxEventResultMap">
        WITH claimed AS (
        UPDATE outbox_event
        SET status = 'PROCESSING'
        WHERE (id, created_at) IN (
        SELECT id, created_at
        FROM outbox_event
        WHERE status = 'NEW'
        ORDER BY created_at
        LIMIT #{batchSize}
        FOR UPDATE SKIP LOCKED
        )
        RETURNING id, event_type, aggregate_id, payload, status, created_at
        )
        SELECT id, event_type, aggregate_id, payload, status, created_at FROM claimed
    </select>

    <select id="findBatchForDispatch" resultMap="OutboxEventResultMap" databaseId="h2">
        SELECT id, event_type, aggregate_id, payload, status, created_at
        FROM outbox_event
        WHERE status = 'NEW'
        ORDER BY created_at
        LIMIT #{batchSize}
    </select>

    <insert id="insert" parameterType="com.dogancaglar.infrastructure.persistence.entity.OutboxEventEntity">
        INSERT INTO outbox_event (id, event_type, aggregate_id, payload, status, created_at)
        VALUES
        (#{eventId, javaType=java.util.UUID, typeHandler=com.dogancaglar.infrastructure.persistence.typehandler.UUIDTypeHandler},
        #{eventType}, #{aggregateId}, #{payload}, #{status}, #{createdAt})
    </insert>

    <insert id="batchUpsert" parameterType="java.util.List">
        INSERT INTO outbox_event (id, event_type, aggregate_id, payload, status, created_at)
        VALUES
        <foreach collection="list" item="event" separator=",">
            (#{event.eventId, javaType=java.util.UUID, typeHandler=com.dogancaglar.infrastructure.persistence.typehandler.UUIDTypeHandler},
            #{event.eventType}, #{event.aggregateId}, #{event.payload}, #{event.status},
            #{event.createdAt})
        </foreach>
        ON CONFLICT (id, created_at) DO UPDATE SET
        event_type = EXCLUDED.event_type,
        aggregate_id = EXCLUDED.aggregate_id,
        payload = EXCLUDED.payload,
        status = EXCLUDED.status;
    </insert>
</mapper>
