# Single-node, controller+broker in one pod; plaintext listeners; single-node-friendly internals.

listeners:
  client: {protocol: PLAINTEXT, containerPort: 9092, name: CLIENT}
  controller: {protocol: PLAINTEXT, containerPort: 9093, name: CONTROLLER}
  interbroker: {protocol: PLAINTEXT, containerPort: 9094, name: INTERNAL}

controller:
  replicaCount: 1
  controllerOnly: false
  overrideConfiguration:
    # Roles & listeners
    process.roles: controller,broker
    controller.listener.names: CONTROLLER
    inter.broker.listener.name: INTERNAL
    listeners: CLIENT://:9092,INTERNAL://:9094,CONTROLLER://:9093
    listener.security.protocol.map: CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
    advertised.listeners: >
      CLIENT://kafka.payment.svc.cluster.local:9092,
      INTERNAL://kafka-controller-0.kafka-controller-headless.payment.svc.cluster.local:9094

    # Single-node defaults (safe in dev)
    num.partitions: 1
    min.insync.replicas: 1

    # Make internal topics 1/1 so Kafka won't expect a 3-node quorum
    offsets.topic.replication.factor: 1
    offsets.topic.num.partitions: 1
    transaction.state.log.replication.factor: 1
    transaction.state.log.min.isr: 1
    transaction.state.log.num.partitions: 1
    # Kafka 4.x also logs this one; keep it small in single node
    share.coordinator.state.topic.num.partitions: 1

broker:
  # No separate broker-only set for single-node
  replicaCount: 0

# Avoid surprises with policies in local clusters
networkPolicy:
  enabled: false

metrics:
  jmx:
    enabled: false
    config: |
      lowercaseOutputName: true
      rules:
        - pattern: "kafka.server<type=(.+), name=(.+)PerSec\\, topic=(.+)><>Count"
          name: "kafka_server_$1_$2_total"
          labels:
            topic: "$3"
          type: COUNTER
      serviceMonitor:
      enabled: true         # set to false if you donâ€™t use Prometheus Operator
      namespace: monitoring # adjust to your Prometheus Operator ns
      interval: 30s
      scrapeTimeout: 10s
    resources:
      requests: {cpu: 50m, memory: 128Mi}
      limits: {cpu: 200m, memory: 256Mi}
  serviceMonitor:
    enabled: true
    namespace: payment
    labels: {release: prometheus-stack}
  kafka:
    enabled: true
    resources:
      requests: {cpu: 50m, memory: 128Mi}
      limits: {cpu: 200m, memory: 256Mi}
    serviceMonitor:
      enabled: true
      namespace: payment
      labels: {release: prometheus-stack}

defaultInitContainers:
  prepareConfig:
    resources:
      requests: {cpu: 50m, memory: 64Mi}
      limits: {cpu: 200m, memory: 128Mi}