services:
  ### üîê Keycloak Identity Provider
  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - auth-net
    ports:
      - "5433:5432"  # Exposed for IntelliJ/pgAdmin or Spring Boot if needed
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 5s
      timeout: 5s
      retries: 10

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev
    ports:
      - "8082:8080"  # Exposed for browser access to Keycloak
    networks:
      - auth-net

  ### üè¶ Payment Database
  payment-db:
    image: postgres:15
    container_name: payment-postgres
    environment:
      POSTGRES_DB: payment
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: payment
    labels:
      service: payment-db
      environment: local
    volumes:
      - payment_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"  # Exposed for Spring Boot to connect
    networks:
      - payment-net

  ### üì® Messaging Stack
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    labels:
      service: zookeper
      environment: local
    ports:
      - "2181:2181"  # Optional: expose for debugging Kafka/Zookeeper
    restart: unless-stopped
    networks:
      - messaging-net

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     # for container-to-container communication
      - "29092:29092"   # for access from localhost (host machine)
    labels:
      service: kafka
      environment: local
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - messaging-net
  redis:
    image: redis:7
    container_name: redis
    volumes:
      - redis-data:/data
      - ./payment-service/src/main/resources/redis/redis.conf:/usr/local/etc/redis/redis.conf

    labels:
      service: redis
      environment: local
    ports:
      - "6379:6379"  # Exposed for Spring Boot to connect
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    restart: unless-stopped
    networks:
      - messaging-net  # Same as Kafka/Zookeeper for simplicity
  redisinsight:
    container_name: redis-ui
    labels:
      service: redis-ui
      environment: local
    image: redis/redisinsight:latest
    ports:
      - "8001:8001"
    restart: always
    networks:
      - messaging-net
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    labels:
      service: kafka-ui
      environment: local
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - messaging-net
    depends_on:
      - kafka


  ### üìä Observability Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms3g -Xmx3g
    mem_limit: 4g  # optional Docker hard limit if neede
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://elasticsearch:9200 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 15
    ports:
      - "9200:9200"  # Exposed for Filebeat, Spring Boot, or browser/curl
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - observability-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    labels:
      service: kibana
      environment: local
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://kibana:5601/api/status" ]
      interval: 10s
      timeout: 10s
      retries: 15
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      - NODE_OPTIONS=--max-old-space-size=1024
    mem_limit: 2g
    ports:
      - "5601:5601"  # Exposed for browser access to Kibana
    networks:
      - observability-net

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.4
    container_name: filebeat
    labels:
      service: filebeat
      environment: local
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro   # ‚úÖ critical
      - /var/run/docker.sock:/var/run/docker.sock:ro               # ‚úÖ needed for metadata
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    networks:
      - observability-net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    command: [ "-c", "/usr/share/filebeat/filebeat.yml" , "--strict.perms=false" ]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./prometheus/grafana-provisioning/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./prometheus/grafana-provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./prometheus/grafana-provisioning/dashboards/:/etc/grafana/provisioning/dashboards/
      - ./prometheus/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - monitoring-net
    depends_on:
      - prometheus


    ### üîÅ Named volumes for persistent storage


volumes:
  payment_postgres_data:
  redis-data:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
  esdata:
  grafana-data:
  prometheus-data:
  keycloak_postgres_data:

### üåê Custom networks per domain
networks:
  auth-net:
    driver: bridge
  payment-net:
    external: true
  messaging-net:
    external: true
  observability-net:
    driver: bridge
  monitoring-net:
    external: true