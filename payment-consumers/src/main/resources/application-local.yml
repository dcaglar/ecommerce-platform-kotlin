app:
  instance-id: ${POD_NAME:${HOSTNAME:${random.value}}}
  cache.ttl-seconds: 3600
  payment-service.api-key: secretpaymentapikey12345

  kafka:
    dynamic-consumers:
      - id: payment-order-enqueuer
        topic: payment_order_created_topic
        group-id: payment-order-enqueuer-consumer-group
        class-name: com.dogancaglar.paymentservice.port.inbound.consumers.PaymentOrderEnqueuer
        concurrency: 4
      - id: payment-order-psp-call-executor
        topic: payment_order_psp_call_requested_topic
        group-id: payment-order-psp-call-executor-consumer-group
        class-name: com.dogancaglar.paymentservice.port.inbound.consumers.PaymentOrderPspCallExecutor
        concurrency: 8
      - id: payment-status-check-executor-scheduler
        topic: payment_status_check_scheduler_topic
        group-id: payment-status-check-scheduler-consumer-group
        class-name: com.dogancaglar.paymentservice.port.inbound.consumers.ScheduledPaymentStatusCheckExecutor
        concurrency: 1

server:
  port: 8080
  tomcat:
    accesslog:
      enabled: true
      directory: /var/log/tomcat
      prefix: access_log
      suffix: .log
      pattern: '%h %l %u %t "%r" %s %b %D'
      buffered: true

spring:
  application:
    name: payment-consumers

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 1500
      idle-timeout: 600000
      max-lifetime: 1800000

  kafka:
    producer:
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: com.dogancaglar.paymentservice.config.kafka.EventEnvelopeKafkaSerializer
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        delivery.timeout.ms: 120000
        linger.ms: 5
        compression.type: lz4

    consumer:
      fetch-max-bytes: 20971520
      max-partition-fetch-bytes: 2097152
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      max-poll-records: 25
      enable-auto-commit: false
      properties:
        spring.deserializer.value.delegate.class: com.dogancaglar.paymentservice.config.kafka.EventEnvelopeKafkaDeserializer
        partition.assignment.strategy: org.apache.kafka.clients.consumer.CooperativeStickyAssignor
        isolation.level: read_committed
        receive.buffer.bytes: 65536
        fetch.max.wait.ms: 50

    properties:
      security.protocol: PLAINTEXT
      session.timeout.ms: 45000

  data:
    redis:
      url: ${SPRING_DATA_REDIS_URL}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

management:
  endpoints:
    web.exposure.include: "prometheus,metrics,health"
  endpoint:
    health:
      enabled: true
      show-details: always
    prometheus.enabled: true
  metrics:
    tags:
      application: payment-consumers
    enable:
      all: false
      hikaricp.connections: true
      hikaricp.connections.acquire: true
      kafka.consumer.fetch.manager.records.lag: true
      kafka.producer.topic.record.send: true
      kafka.consumer.fetch.manager.records.consumed: true
      kafka.consumer.fetch.manager.fetch.latency: true
      kafka.consumer.io.time: true
      process.cpu.usage: true
      jvm.threads.live: true
      jvm.memory.used: true
      jvm.memory.max: true
      jvm.gc.pause: true
      # binders

      # your custom meters (base names)
      psp_calls_total: true
      psp_call_latency: true
      redis_retry_zset_size: true
      redis_retry_batch_size: true
      redis_retry_events_total: true
      redis_retry_dispatch_batch_seconds: true
      redis_retry_dispatch_event_seconds: true
    distribution:
      # timers you want histograms for (you already call publishPercentileHistogram() in code,
      # this just makes it explicit in config too)
      percentiles-histogram:
        psp_call_latency: true
        redis_retry_dispatch_batch_seconds: true
        redis_retry_dispatch_event_seconds: true
      percentiles:
        psp_call_latency: 0.5,0.95,0.99
        redis_retry_dispatch_batch_seconds: 0.5,0.95,0.99
        redis_retry_dispatch_event_seconds: 0.5,0.95,0.99
    export:
      prometheus:
        enabled: true

psp:
  simulation:
    currentScenario: NORMAL
    scenarios:
      NORMAL:
        timeouts: { enabled: false, probability: 0 }
        latency:
          fast:     { probability: 100, minMs: 50,  maxMs: 150 }
          moderate: { probability: 0,   minMs: 150, maxMs: 300 }
          slow:     { probability: 0,   minMs: 300, maxMs: 600 }
        response:   { successful: 70, retryable: 20, statusCheck: 0, nonRetryable: 10 }
      PEAK:
        timeouts: { enabled: true, probability: 25 }
        latency:
          fast:     { probability: 30, minMs: 250,  maxMs: 500 }
          moderate: { probability: 50, minMs: 501,  maxMs: 1500 }
          slow:     { probability: 20, minMs: 1501, maxMs: 2500 }
        response:   { successful: 50, retryable: 45, statusCheck: 0, nonRetryable: 5 }
      DEGRADED:
        timeouts: { enabled: true, probability: 30 }
        latency:
          fast:     { probability: 20, minMs: 2000, maxMs: 2200 }
          moderate: { probability: 20, minMs: 2201, maxMs: 2600 }
          slow:     { probability: 60, minMs: 2601, maxMs: 2990 }
        response:   { successful: 50, retryable: 40, statusCheck: 0, nonRetryable: 10 }
      BEST_PSP_EVER:
        timeouts: { enabled: false, probability: 0 }
        latency:
          fast:     { probability: 100, minMs: 1, maxMs: 2 }
          moderate: { probability: 0,   minMs: 0, maxMs: 0 }
          slow:     { probability: 0,   minMs: 0, maxMs: 0 }
        response:   { successful: 100, retryable: 0, statusCheck: 0, nonRetryable: 0 }

logging.level.org.springframework.kafka.listener.KafkaMessageListenerContainer: DEBUG
logging.level.org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: DEBUG